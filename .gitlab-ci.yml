variables:
  COVERAGE_FAIL_BELOW: 50

stages:
    - check-format
    - test
    - export

default:
  image: python:3.7-slim
  tags: ["kubernetes"]

check-format:
  stage: check-format
  script:
    - apt update -y && apt install -y git
    - pip3 install pre-commit
    - pre-commit run --all-files --show-diff-on-failure

#
# Test that not enabling rewriting works OK:
# stable-18 and unstable-20: enable rewriting
# unstable-18 and stable-20: do not enable rewriting

test-stable-18:
  stage: test
  image: $CI_REGISTRY/rewriting/ddisasm/ubuntu18
  script:
    - wget -O - https://download.grammatech.com/gtirb/files/apt-repo/conf/apt.gpg.key | apt-key add -
    - echo "deb https://download.grammatech.com/gtirb/files/apt-repo bionic stable" >> /etc/apt/sources.list
    - apt-get update -y
    - apt-get install -y gtirb-pprinter ddisasm
    - pip3 install --upgrade pip
    - cd gtirb_lsp_server
    - pip3 install -r requirements-dev.txt
    - pip3 install -e .[rewriting]
    - pytest --cov=gtirb_lsp_server --cov-fail-under=$COVERAGE_FAIL_BELOW

test-unstable-18:
  stage: test
  image: $CI_REGISTRY/rewriting/ddisasm/ubuntu18
  script:
    - wget -O - https://download.grammatech.com/gtirb/files/apt-repo/conf/apt.gpg.key | apt-key add -
    - echo "deb $INTERNAL_APT_REPO bionic unstable" >> /etc/apt/sources.list
    - apt-get update -y
    - apt-get install -y gtirb-pprinter ddisasm
    - pip3 install --upgrade pip
    - cd gtirb_lsp_server
    - pip3 install -r requirements-dev.txt
    - pip3 install -e . --pre --extra-index-url "$EXTRA_INDEX_URL"
    - pytest --cov=gtirb_lsp_server --cov-fail-under=$COVERAGE_FAIL_BELOW

test-stable-20:
  stage: test
  image: $CI_REGISTRY/rewriting/ddisasm/ubuntu20
  script:
    - wget -O - https://download.grammatech.com/gtirb/files/apt-repo/conf/apt.gpg.key | apt-key add -
    - echo "deb https://download.grammatech.com/gtirb/files/apt-repo focal stable" >> /etc/apt/sources.list
    - apt-get update -y
    - apt-get install -y gtirb-pprinter ddisasm
    - cd gtirb_lsp_server
    - pip3 install -r requirements-dev.txt
    - pip3 install -e .
    - pytest --cov=gtirb_lsp_server --cov-fail-under=$COVERAGE_FAIL_BELOW

test-unstable-20:
  stage: test
  image: $CI_REGISTRY/rewriting/ddisasm/ubuntu20
  script:
    - wget -O - https://download.grammatech.com/gtirb/files/apt-repo/conf/apt.gpg.key | apt-key add -
    - echo "deb $INTERNAL_APT_REPO focal unstable" >> /etc/apt/sources.list
    - apt-get update -y
    - apt-get install -y gtirb-pprinter ddisasm
    - cd gtirb_lsp_server
    - pip3 install -r requirements-dev.txt
    - pip3 install -e .[rewriting] --pre --extra-index-url "$EXTRA_INDEX_URL"
    - pytest --cov=gtirb_lsp_server --cov-fail-under=$COVERAGE_FAIL_BELOW

export_lsp:
  stage: export
  script:
    - pip install -r gtirb_lsp_server/requirements-dev.txt
    - python3 gtirb_lsp_server/setup.py bdist_wheel --dist-dir=$CI_PROJECT_DIR/dist
    - VERSION=$(python3 -c "from imp import load_source; pkginfo = load_source('pkginfo.version', 'gtirb_lsp_server/version.py'); print(pkginfo.__version__)")
    - PKGNAME=$(python3 -c "from imp import load_source; pkginfo = load_source('pkginfo.version', 'gtirb_lsp_server/version.py'); print(pkginfo.__packagename__)")
    - if [[ "$VERSION" =~ \.dev[[:digit:]]*.*$ && "$CI_COMMIT_REF_NAME" =~ ^release-.* ]]; then exit 1; fi
    # this job is not using $CI_JOB_TOKEN because it only has read access
    # https://gitlab.com/gitlab-org/gitlab/-/issues/35067
    # this job is also not using $CI_DEPLOY_USER and $CI_DEPLOY_PASSWORD because it only has write access
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
        ls $CI_PROJECT_DIR/dist/*.whl | xargs $CI_PROJECT_DIR/delete_remote_packages.py $GL_PKG_API_TOKEN;
      fi
    - sed "s/password = <access token>/password = $GL_PKG_API_TOKEN/" $CI_PROJECT_DIR/.pypirc > ~/.pypirc
    - python3 -m twine upload --verbose --repository repypi $CI_PROJECT_DIR/dist/*.whl
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'

build_vsix:
  stage: test
  image: node:latest
  script:
    - npm install
    - npm install -g vsce
    - vsce package
  artifacts:
    expire_in: 2 hrs
    paths:
      - gtirb-vscode-*.*.*.vsix

export_vsix:
  stage: export
  image: python:3.7-slim
  script:
    - apt-get update -y
    - apt-get install -y curl
    - PACKAGENAME='gtirb-vscode'
    - VERSION=$(python3 -c "import json; f = open('package.json', 'r'); extinfo = json.load(f); f.close(); print(extinfo['version'])")
    - curl --header "JOB-TOKEN:$CI_JOB_TOKEN" --upload-file ${PACKAGENAME}-${VERSION}.vsix ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGENAME}/${VERSION}/${PACKAGENAME}-${VERSION}.vsix
  dependencies:
    - build_vsix
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
